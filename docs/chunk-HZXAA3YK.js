import{a as ge}from"./chunk-S6KP2GBQ.js";import{a as y,c as x,d as Ae,e as T,f as me,g as Ee,h as B}from"./chunk-54F7A7GG.js";import{o as Ne,p as ve}from"./chunk-LSDUHFNV.js";import{a as pe,b as ue,c as he,d as Ce,e as z,f as fe,g as M,h as we,i as v}from"./chunk-WCPZFELE.js";import{A as k,B as W,C as b,D as R,E as f,G as q,H as de,I as ne,K as E,M as le,N as A,O as F,Q as re,R as i,T as U,g as m,h as C,i as g,j as Q,k as G,r as ae,t as d,u as te,v as se,z as ce}from"./chunk-AJGGPJRP.js";import{b as u,c as ie,i as L,p as oe}from"./chunk-3MOYO27G.js";import{la as ee}from"./chunk-YVA7YSBN.js";import{a as w,b as N,e as V}from"./chunk-QGXACWGO.js";var $=class a{constructor(){}static getInstance({projectId:e,chainId:t,enableLogger:s,onTimeout:n,abortController:r,getActiveCaipNetwork:o,getCaipNetworks:c}){let{metadata:p,sdkVersion:l,sdkType:h}=d.getSnapshot();return a.instance||(a.instance=new ae({projectId:e,chainId:t,enableLogger:s,onTimeout:n,abortController:r,getActiveCaipNetwork:o,getCaipNetworks:c,enableCloudAuthAccount:!!d.state.remoteFeatures?.emailCapture,metadata:p,sdkVersion:l,sdkType:h})),a.instance}};var j={ERROR_CODE_UNRECOGNIZED_CHAIN_ID:4902,ERROR_CODE_DEFAULT:5e3,ERROR_INVALID_CHAIN_ID:32603};var K=class extends fe{async setUniversalProvider(e){if(!this.namespace)throw new Error("UniversalAdapter:setUniversalProvider - namespace is required");return this.addConnector(new we({provider:e,caipNetworks:this.getCaipNetworks(),namespace:this.namespace})),Promise.resolve()}async connect(e){return Promise.resolve({id:"WALLET_CONNECT",type:"WALLET_CONNECT",chainId:Number(e.chainId),provider:this.provider,address:""})}async disconnect(){try{await this.getWalletConnectConnector().disconnect(),this.emit("disconnect")}catch(e){console.warn("UniversalAdapter:disconnect - error",e)}return{connections:[]}}syncConnections(){return Promise.resolve()}async getAccounts({namespace:e}){let s=this.provider?.session?.namespaces?.[e]?.accounts?.map(n=>{let[,,r]=n.split(":");return r}).filter((n,r,o)=>o.indexOf(n)===r)||[];return Promise.resolve({accounts:s.map(n=>g.createAccount(e,n,e==="bip122"?"payment":"eoa"))})}async syncConnectors(){return Promise.resolve()}async getBalance(e){if(!(e.caipNetwork&&m.BALANCE_SUPPORTED_CHAINS.includes(e.caipNetwork?.chainNamespace))||e.caipNetwork?.testnet)return{balance:"0.00",symbol:e.caipNetwork?.nativeCurrency.symbol||""};let s=i.getAccountData();if(s?.balanceLoading&&e.chainId===i.state.activeCaipNetwork?.id)return{balance:s?.balance||"0.00",symbol:s?.balanceSymbol||""};let r=(await i.fetchTokenBalance()).find(o=>o.chainId===`${e.caipNetwork?.chainNamespace}:${e.chainId}`&&o.symbol===e.caipNetwork?.nativeCurrency.symbol);return{balance:r?.quantity.numeric||"0.00",symbol:r?.symbol||e.caipNetwork?.nativeCurrency.symbol||""}}async signMessage(e){let{provider:t,message:s,address:n}=e;if(!t)throw new Error("UniversalAdapter:signMessage - provider is undefined");let r="";return i.state.activeCaipNetwork?.chainNamespace===u.CHAIN.SOLANA?r=(await t.request({method:"solana_signMessage",params:{message:ue.encode(new TextEncoder().encode(s)),pubkey:n}},i.state.activeCaipNetwork?.caipNetworkId)).signature:r=await t.request({method:"personal_sign",params:[s,n]},i.state.activeCaipNetwork?.caipNetworkId),{signature:r}}async estimateGas(){return Promise.resolve({gas:BigInt(0)})}async sendTransaction(){return Promise.resolve({hash:""})}walletGetAssets(e){return Promise.resolve({})}async writeContract(){return Promise.resolve({hash:""})}emitFirstAvailableConnection(){}parseUnits(){return 0n}formatUnits(){return"0"}async getCapabilities(){return Promise.resolve({})}async grantPermissions(){return Promise.resolve({})}async revokePermissions(){return Promise.resolve("0x")}async syncConnection(){return Promise.resolve({id:"WALLET_CONNECT",type:"WALLET_CONNECT",chainId:1,provider:this.provider,address:""})}async switchNetwork(e){let{caipNetwork:t}=e,s=this.getWalletConnectConnector();if(t.chainNamespace===u.CHAIN.EVM)try{await s.provider?.request({method:"wallet_switchEthereumChain",params:[{chainId:ee(t.id)}]})}catch(n){if(n.code===j.ERROR_CODE_UNRECOGNIZED_CHAIN_ID||n.code===j.ERROR_INVALID_CHAIN_ID||n.code===j.ERROR_CODE_DEFAULT||n?.data?.originalError?.code===j.ERROR_CODE_UNRECOGNIZED_CHAIN_ID)try{await s.provider?.request({method:"wallet_addEthereumChain",params:[{chainId:ee(t.id),rpcUrls:[t?.rpcUrls.chainDefault?.http],chainName:t.name,nativeCurrency:t.nativeCurrency,blockExplorerUrls:[t.blockExplorers?.default.url]}]})}catch{throw new Error("Chain is not supported")}}s.provider.setDefaultChain(t.caipNetworkId)}getWalletConnectProvider(){return this.connectors.find(s=>s.type==="WALLET_CONNECT")?.provider}};var ke=["email","socials","swaps","onramp","activity","reownBranding","multiWallet","emailCapture","payWithExchange","payments","reownAuthentication"],Y={email:{apiFeatureName:"social_login",localFeatureName:"email",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>{if(!a?.config)return!1;let e=a.config;return!!a.isEnabled&&e.includes("email")},processFallback:a=>a===void 0?m.DEFAULT_REMOTE_FEATURES.email:!!a},socials:{apiFeatureName:"social_login",localFeatureName:"socials",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>{if(!a?.config)return!1;let e=a.config;return a.isEnabled&&e.length>0?e.filter(t=>t!=="email"):!1},processFallback:a=>a===void 0?m.DEFAULT_REMOTE_FEATURES.socials:typeof a=="boolean"?a?m.DEFAULT_REMOTE_FEATURES.socials:!1:a},swaps:{apiFeatureName:"swap",localFeatureName:"swaps",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>{if(!a?.config)return!1;let e=a.config;return a.isEnabled&&e.length>0?e:!1},processFallback:a=>a===void 0?m.DEFAULT_REMOTE_FEATURES.swaps:typeof a=="boolean"?a?m.DEFAULT_REMOTE_FEATURES.swaps:!1:a},onramp:{apiFeatureName:"onramp",localFeatureName:"onramp",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>{if(!a?.config)return!1;let e=a.config;return a.isEnabled&&e.length>0?e:!1},processFallback:a=>a===void 0?m.DEFAULT_REMOTE_FEATURES.onramp:typeof a=="boolean"?a?m.DEFAULT_REMOTE_FEATURES.onramp:!1:a},activity:{apiFeatureName:"activity",localFeatureName:"history",returnType:!1,isLegacy:!0,isAvailableOnBasic:!1,processApi:a=>!!a.isEnabled,processFallback:a=>a===void 0?m.DEFAULT_REMOTE_FEATURES.activity:!!a},reownBranding:{apiFeatureName:"reown_branding",localFeatureName:"reownBranding",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>!!a.isEnabled,processFallback:a=>a===void 0?m.DEFAULT_REMOTE_FEATURES.reownBranding:!!a},emailCapture:{apiFeatureName:"email_capture",localFeatureName:"emailCapture",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>a.isEnabled&&(a.config??[]),processFallback:a=>!1},multiWallet:{apiFeatureName:"multi_wallet",localFeatureName:"multiWallet",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>!!a.isEnabled,processFallback:()=>m.DEFAULT_REMOTE_FEATURES.multiWallet},payWithExchange:{apiFeatureName:"fund_from_exchange",localFeatureName:"payWithExchange",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>!!a.isEnabled,processFallback:()=>m.DEFAULT_REMOTE_FEATURES.payWithExchange},payments:{apiFeatureName:"payments",localFeatureName:"payments",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>!!a.isEnabled,processFallback:()=>m.DEFAULT_REMOTE_FEATURES.payments},reownAuthentication:{apiFeatureName:"reown_authentication",localFeatureName:"reownAuthentication",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>!!a.isEnabled,processFallback:a=>typeof a>"u"?m.DEFAULT_REMOTE_FEATURES.reownAuthentication:!!a}},Te={localSettingsOverridden:new Set,getApiConfig(a,e){return e?.find(t=>t.id===a)},addWarning(a,e){if(a!==void 0){let t=Y[e],s=t.isLegacy?`"features.${t.localFeatureName}" (now "${e}")`:`"features.${e}"`;this.localSettingsOverridden.add(s)}},processFeature(a,e,t,s,n){let r=Y[a],o=e[r.localFeatureName];if(n&&!r.isAvailableOnBasic)return!1;if(s){let c=this.getApiConfig(r.apiFeatureName,t);return c?.config===null?this.processFallbackFeature(a,o):c?.config?(o!==void 0&&this.addWarning(o,a),this.processApiFeature(a,c)):!1}return this.processFallbackFeature(a,o)},processApiFeature(a,e){return Y[a].processApi(e)},processFallbackFeature(a,e){return Y[a].processFallback(e)},async fetchRemoteFeatures(a){let e=a.basic??!1,t=a.features||{};this.localSettingsOverridden.clear();let s=null,n=!1;try{s=await W.fetchProjectConfig(),n=s!=null}catch(o){console.warn("[Reown Config] Failed to fetch remote project configuration. Using local/default values.",o)}let r=n&&!e?m.DEFAULT_REMOTE_FEATURES:m.DEFAULT_REMOTE_FEATURES_DISABLED;try{for(let o of ke){let c=this.processFeature(o,t,s,n,e);Object.assign(r,{[o]:c})}}catch(o){return console.warn("[Reown Config] Failed to process the configuration from Cloud. Using default values.",o),m.DEFAULT_REMOTE_FEATURES}if(n&&this.localSettingsOverridden.size>0){let o=`Your local configuration for ${Array.from(this.localSettingsOverridden).join(", ")} was ignored because a remote configuration was successfully fetched. Please manage these features via your project dashboard on dashboard.reown.com.`;v.open({debugMessage:T.ALERT_WARNINGS.LOCAL_CONFIGURATION_IGNORED.debugMessage(o)},"warning")}return r}};var X=class{constructor(e){this.chainNamespaces=[],this.features={},this.remoteFeatures={},this.reportedAlertErrors={},this.getCaipNetwork=(t,s)=>{if(t){let n=i.getCaipNetworks(t)?.find(c=>c.id===s);if(n)return n;let r=i.getNetworkData(t)?.caipNetwork;return r||i.getRequestedCaipNetworks(t).filter(c=>c.chainNamespace===t)?.[0]}return i.state.activeCaipNetwork||this.defaultCaipNetwork},this.getCaipNetworkId=()=>{let t=this.getCaipNetwork();if(t)return t.id},this.getCaipNetworks=t=>i.getCaipNetworks(t),this.getActiveChainNamespace=()=>i.state.activeChain,this.setRequestedCaipNetworks=(t,s)=>{i.setRequestedCaipNetworks(t,s)},this.getApprovedCaipNetworkIds=()=>i.getAllApprovedCaipNetworkIds(),this.getCaipAddress=t=>i.state.activeChain===t||!t?i.state.activeCaipAddress:i.state.chains.get(t)?.accountState?.caipAddress,this.setClientId=t=>{se.setClientId(t)},this.getProvider=t=>A.getProvider(t),this.getProviderType=t=>A.getProviderId(t),this.getPreferredAccountType=t=>q(t),this.setCaipAddress=(t,s,n=!1)=>{i.setAccountProp("caipAddress",t,s,n),i.setAccountProp("address",g.getPlainAddress(t),s,n)},this.setBalance=(t,s,n)=>{i.setAccountProp("balance",t,n),i.setAccountProp("balanceSymbol",s,n)},this.setProfileName=(t,s)=>{i.setAccountProp("profileName",t,s)},this.setProfileImage=(t,s)=>{i.setAccountProp("profileImage",t,s)},this.setUser=(t,s)=>{i.setAccountProp("user",t,s)},this.resetAccount=t=>{i.resetAccount(t)},this.setCaipNetwork=t=>{i.setActiveCaipNetwork(t)},this.setCaipNetworkOfNamespace=(t,s)=>{i.setChainNetworkData(s,{caipNetwork:t})},this.setStatus=(t,s)=>{i.setAccountProp("status",t,s),f.isConnected()?C.setConnectionStatus("connected"):C.setConnectionStatus("disconnected")},this.getAddressByChainNamespace=t=>i.getAccountData(t)?.address,this.setConnectors=t=>{let s=[...f.state.allConnectors,...t];f.setConnectors(s)},this.setConnections=(t,s)=>{C.setConnections(t,s),E.setConnections(t,s)},this.fetchIdentity=t=>se.fetchIdentity(t),this.getReownName=t=>Ce.getNamesForAddress(t),this.getConnectors=()=>f.getConnectors(),this.getConnectorImage=t=>ce.getConnectorImage(t),this.getConnections=t=>this.remoteFeatures.multiWallet?ne.getConnectionsData(t).connections:(v.open(u.REMOTE_FEATURES_ALERTS.MULTI_WALLET_NOT_ENABLED.DEFAULT,"info"),[]),this.getRecentConnections=t=>this.remoteFeatures.multiWallet?ne.getConnectionsData(t).recentConnections:(v.open(u.REMOTE_FEATURES_ALERTS.MULTI_WALLET_NOT_ENABLED.DEFAULT,"info"),[]),this.switchConnection=async t=>{if(!this.remoteFeatures.multiWallet){v.open(u.REMOTE_FEATURES_ALERTS.MULTI_WALLET_NOT_ENABLED.DEFAULT,"info");return}await E.switchConnection(t)},this.deleteConnection=t=>{if(!this.remoteFeatures.multiWallet){v.open(u.REMOTE_FEATURES_ALERTS.MULTI_WALLET_NOT_ENABLED.DEFAULT,"info");return}C.deleteAddressFromConnection(t),E.syncStorageConnections()},this.setConnectedWalletInfo=(t,s)=>{let n=A.getProviderId(s),r=t?N(w({},t),{type:n}):void 0;i.setAccountProp("connectedWalletInfo",r,s)},this.getIsConnectedState=()=>!!i.state.activeCaipAddress,this.addAddressLabel=(t,s,n)=>{let r=i.getAccountData(n)?.addressLabels||{};i.setAccountProp("addressLabels",N(w({},r),{[t]:s}),n)},this.removeAddressLabel=(t,s)=>{let n=i.getAccountData(s)?.addressLabels||{};i.setAccountProp("addressLabels",N(w({},n),{[t]:void 0}),s)},this.getAddress=t=>{let s=t||i.state.activeChain;return i.getAccountData(s)?.address},this.resetNetwork=t=>{i.resetNetwork(t)},this.addConnector=t=>{f.addConnector(t)},this.resetWcConnection=()=>{E.resetWcConnection()},this.setAddressExplorerUrl=(t,s)=>{i.setAccountProp("addressExplorerUrl",t,s)},this.setSmartAccountDeployed=(t,s)=>{i.setAccountProp("smartAccountDeployed",t,s)},this.setPreferredAccountType=(t,s)=>{i.setAccountProp("preferredAccountType",t,s)},this.setEIP6963Enabled=t=>{d.setEIP6963Enabled(t)},this.handleUnsafeRPCRequest=()=>{if(this.isOpen()){if(this.isTransactionStackEmpty())return;this.redirect("ApproveTransaction")}else this.open({view:"ApproveTransaction"})},this.options=e,this.version=e.sdkVersion,this.caipNetworks=this.extendCaipNetworks(e),this.chainNamespaces=this.getChainNamespacesSet(e.adapters,this.caipNetworks),this.defaultCaipNetwork=this.extendDefaultCaipNetwork(e),this.chainAdapters=this.createAdapters(e.adapters),this.readyPromise=this.initialize(e),Ae.checkSDKVersion(e.sdkVersion)}getChainNamespacesSet(e,t){let s=e?.map(r=>r.namespace).filter(r=>!!r);if(s?.length)return[...new Set(s)];let n=t?.map(r=>r.chainNamespace);return[...new Set(n)]}async initialize(e){if(this.initializeProjectSettings(e),this.initControllers(e),await this.initChainAdapters(),this.sendInitializeEvent(e),d.state.enableReconnect?(await this.syncExistingConnection(),await this.syncAdapterConnections()):await this.unSyncExistingConnection(),this.remoteFeatures=await Te.fetchRemoteFeatures(e),d.setRemoteFeatures(this.remoteFeatures),this.remoteFeatures.onramp&&pe.setOnrampProviders(this.remoteFeatures.onramp),(d.state.remoteFeatures?.email||Array.isArray(d.state.remoteFeatures?.socials)&&d.state.remoteFeatures?.socials.length>0)&&await this.checkAllowedOrigins(),d.state.features?.reownAuthentication||d.state.remoteFeatures?.reownAuthentication){let{ReownAuthentication:t}=await import("./chunk-L67HZFCI.js"),s=d.state.siwx;s instanceof t||(s&&console.warn("ReownAuthentication option is enabled, SIWX configuration will be overridden."),d.setSIWX(new t))}}async openSend(e){let t=e.namespace||i.state.activeChain,s=this.getCaipAddress(t),n=this.getCaipNetwork(t)?.id;if(!s)throw new Error("openSend: caipAddress not found");if(n?.toString()!==e.chainId.toString()){let r=i.getCaipNetworkById(e.chainId,t);if(!r)throw new Error(`openSend: caipNetwork with chainId ${e.chainId} not found`);await this.switchNetwork(r,{throwOnFailure:!0})}try{let r=me.getTokenSymbolByAddress(e.assetAddress);r&&await W.fetchTokenImages([r])}catch{}return await U.open({view:"WalletSend",data:{send:e}}),new Promise((r,o)=>{let c=re.subscribeKey("hash",h=>{h&&(l(),r({hash:h}))}),p=U.subscribe(h=>{h.open||(l(),o(new Error("Modal closed")))}),l=this.createCleanupHandler([c,p])})}toModalOptions(){function e(s){return s?.view==="Swap"}function t(s){return s?.view==="WalletSend"}return{isSwap:e,isSend:t}}async checkAllowedOrigins(){try{let e=await W.fetchAllowedOrigins();if(!g.isClient())return;let t=window.location.origin;z.isOriginAllowed(t,e,u.DEFAULT_ALLOWED_ANCESTORS)||v.open(T.ALERT_ERRORS.ORIGIN_NOT_ALLOWED,"error")}catch(e){if(!(e instanceof Error))return;switch(e.message){case"RATE_LIMITED":v.open(T.ALERT_ERRORS.RATE_LIMITED_APP_CONFIGURATION,"error");break;case"SERVER_ERROR":{let t=e.cause instanceof Error?e.cause:e;v.open({displayMessage:T.ALERT_ERRORS.SERVER_ERROR_APP_CONFIGURATION.displayMessage,debugMessage:T.ALERT_ERRORS.SERVER_ERROR_APP_CONFIGURATION.debugMessage(t.message)},"error");break}default:break}}}createCleanupHandler(e){return()=>{e.forEach(t=>{try{t()}catch{}})}}sendInitializeEvent(e){let t=V(e,[]);delete t.adapters,delete t.universalProvider,k.sendEvent({type:"track",event:"INITIALIZE",properties:N(w({},t),{networks:e.networks.map(s=>s.id),siweConfig:{options:e.siweConfig?.options||{}}})})}initControllers(e){this.initializeOptionsController(e),this.initializeChainController(e),this.initializeThemeController(e),this.initializeConnectionController(e),this.initializeConnectorController()}initAdapterController(){le.initialize(this.chainAdapters)}initializeThemeController(e){e.themeMode&&R.setThemeMode(e.themeMode),e.themeVariables&&R.setThemeVariables(e.themeVariables)}initializeChainController(e){if(!this.connectionControllerClient)throw new Error("ConnectionControllerClient must be set");i.initialize(e.adapters??[],this.caipNetworks,{connectionControllerClient:this.connectionControllerClient});let t=this.getDefaultNetwork();t&&i.setActiveCaipNetwork(t)}initializeConnectionController(e){E.initialize(e.adapters??[]),E.setWcBasic(e.basic??!1)}initializeConnectorController(){f.initialize(this.chainNamespaces)}initializeProjectSettings(e){d.setProjectId(e.projectId),d.setSdkVersion(e.sdkVersion)}initializeOptionsController(e){d.setDebug(e.debug!==!1),d.setEnableWalletGuide(e.enableWalletGuide!==!1),d.setEnableWallets(e.enableWallets!==!1),d.setEIP6963Enabled(e.enableEIP6963!==!1),d.setEnableNetworkSwitch(e.enableNetworkSwitch!==!1),d.setEnableReconnect(e.enableReconnect!==!1),d.setEnableMobileFullScreen(e.enableMobileFullScreen===!0),d.setCoinbasePreference(e.coinbasePreference),d.setEnableAuthLogger(e.enableAuthLogger!==!1),d.setCustomRpcUrls(e.customRpcUrls),d.setEnableEmbedded(e.enableEmbedded),d.setAllWallets(e.allWallets),d.setIncludeWalletIds(e.includeWalletIds),d.setExcludeWalletIds(e.excludeWalletIds),d.setFeaturedWalletIds(e.featuredWalletIds),d.setTokens(e.tokens),d.setTermsConditionsUrl(e.termsConditionsUrl),d.setPrivacyPolicyUrl(e.privacyPolicyUrl),d.setCustomWallets(e.customWallets),d.setFeatures(e.features),d.setAllowUnsupportedChain(e.allowUnsupportedChain),d.setUniversalProviderConfigOverride(e.universalProviderConfigOverride),d.setPreferUniversalLinks(e.experimental_preferUniversalLinks),d.setDefaultAccountTypes(e.defaultAccountTypes);let t=this.getDefaultMetaData();if(!e.metadata&&t&&(e.metadata=t),d.setMetadata(e.metadata),d.setDisableAppend(e.disableAppend),d.setEnableEmbedded(e.enableEmbedded),d.setSIWX(e.siwx),this.features=d.state.features??{},!e.projectId){v.open(T.ALERT_ERRORS.PROJECT_ID_NOT_CONFIGURED,"error");return}if(e.adapters?.find(n=>n.namespace===u.CHAIN.EVM)&&e.siweConfig){if(e.siwx)throw new Error("Cannot set both `siweConfig` and `siwx` options");d.setSIWX(e.siweConfig.mapToSIWX())}}getDefaultMetaData(){return g.isClient()?{name:document.getElementsByTagName("title")?.[0]?.textContent||"",description:document.querySelector('meta[property="og:description"]')?.content||"",url:window.location.origin,icons:[document.querySelector('link[rel~="icon"]')?.href||""]}:null}setUnsupportedNetwork(e){let t=this.getActiveChainNamespace();if(t){let s=B.getUnsupportedNetwork(`${t}:${e}`);i.setActiveCaipNetwork(s)}}getDefaultNetwork(){return B.getCaipNetworkFromStorage(this.defaultCaipNetwork)}extendCaipNetwork(e,t){return B.extendCaipNetwork(e,{customNetworkImageUrls:t.chainImages,projectId:t.projectId})}extendCaipNetworks(e){return B.extendCaipNetworks(e.networks,{customNetworkImageUrls:e.chainImages,customRpcUrls:e.customRpcUrls,projectId:e.projectId})}extendDefaultCaipNetwork(e){let t=e.networks.find(n=>n.id===e.defaultNetwork?.id);return t?B.extendCaipNetwork(t,{customNetworkImageUrls:e.chainImages,customRpcUrls:e.customRpcUrls,projectId:e.projectId}):void 0}async disconnectConnector(e,t){try{this.setLoading(!0,e);let s={connections:[]},n=this.getAdapter(e);return(i.state.chains.get(e)?.accountState?.caipAddress||!d.state.enableReconnect)&&n?.disconnect&&(s=await n.disconnect({id:t})),this.setLoading(!1,e),s}catch(s){throw this.setLoading(!1,e),new Error(`Failed to disconnect chains: ${s.message}`)}}createClients(){this.connectionControllerClient={connectWalletConnect:async()=>{let e=i.state.activeChain,t=this.getAdapter(e),s=this.getCaipNetwork(e)?.id,n=E.getConnections(e),r=this.remoteFeatures.multiWallet,o=n.length>0;if(!t)throw new Error("Adapter not found");let c=await t.connectWalletConnect(s);(!o||!r)&&this.close(),this.setClientId(c?.clientId||null),C.setConnectedNamespaces([...i.state.chains.keys()]),await this.syncWalletConnectAccount(),await M.initializeIfEnabled()},connectExternal:async e=>{let t=await this.onConnectExternal(e);return await this.connectInactiveNamespaces(e,t),t?{address:t.address}:void 0},reconnectExternal:async({id:e,info:t,type:s,provider:n})=>{let r=i.state.activeChain,o=this.getAdapter(r);if(!r)throw new Error("reconnectExternal: namespace not found");if(!o)throw new Error("reconnectExternal: adapter not found");o?.reconnect&&(await o?.reconnect({id:e,info:t,type:s,provider:n,chainId:this.getCaipNetwork()?.id}),C.addConnectedNamespace(r),this.syncConnectedWalletInfo(r))},disconnectConnector:async e=>{await this.disconnectConnector(e.namespace,e.id)},disconnect:async e=>{let{id:t,chainNamespace:s,initialDisconnect:n}=e||{},r=s||i.state.activeChain,o=f.getConnectorId(r),c=t===u.CONNECTOR_ID.AUTH||o===u.CONNECTOR_ID.AUTH,p=t===u.CONNECTOR_ID.WALLET_CONNECT||o===u.CONNECTOR_ID.WALLET_CONNECT;try{let l=Array.from(i.state.chains.keys()),h=s?[s]:l;(p||c)&&(h=l);let I=h.map(async P=>{let _=f.getConnectorId(P),J=t||_,H=await this.disconnectConnector(P,J);H&&(c&&C.deleteConnectedSocialProvider(),H.connections.forEach(S=>{C.addDisconnectedConnectorId(S.connectorId,P)})),n&&this.onDisconnectNamespace({chainNamespace:P,closeModal:!1})}),O=await Promise.allSettled(I);re.resetSend(),E.resetWcConnection(),M.getSIWX()?.signOutOnDisconnect&&await M.clearSessions(),f.setFilterByNamespace(void 0),E.syncStorageConnections();let D=O.filter(P=>P.status==="rejected");if(D.length>0)throw new Error(D.map(P=>P.reason.message).join(", "));k.sendEvent({type:"track",event:"DISCONNECT_SUCCESS",properties:{namespace:s||"all"}})}catch(l){throw new Error(`Failed to disconnect chains: ${l.message}`)}},checkInstalled:e=>e?e.some(t=>!!window.ethereum?.[String(t)]):!!window.ethereum,signMessage:async e=>{let t=i.state.activeChain,s=this.getAdapter(i.state.activeChain);if(!t)throw new Error("signMessage: namespace not found");if(!s)throw new Error("signMessage: adapter not found");let n=this.getAddress(t);if(!n)throw new Error("signMessage: address not found");return(await s?.signMessage({message:e,address:n,provider:A.getProvider(t)}))?.signature||""},sendTransaction:async e=>{let t=e.chainNamespace;if(!t)throw new Error("sendTransaction: namespace not found");if(m.SEND_SUPPORTED_NAMESPACES.includes(t)){let s=this.getAdapter(t);if(!s)throw new Error("sendTransaction: adapter not found");let n=A.getProvider(t);return(await s?.sendTransaction(N(w({},e),{caipNetwork:this.getCaipNetwork(),provider:n})))?.hash||""}return""},estimateGas:async e=>{let t=e.chainNamespace;if(t===u.CHAIN.EVM){let s=this.getAdapter(t);if(!s)throw new Error("estimateGas: adapter is required but got undefined");let n=A.getProvider(t),r=this.getCaipNetwork();if(!r)throw new Error("estimateGas: caipNetwork is required but got undefined");return(await s?.estimateGas(N(w({},e),{provider:n,caipNetwork:r})))?.gas||0n}return 0n},getEnsAvatar:async()=>{let e=i.state.activeChain;if(!e)throw new Error("getEnsAvatar: namespace is required but got undefined");let t=this.getAddress(e);if(!t)throw new Error("getEnsAvatar: address not found");return await this.syncIdentity({address:t,chainId:Number(this.getCaipNetwork()?.id),chainNamespace:e}),i.getAccountData()?.profileImage||!1},getEnsAddress:async e=>await z.resolveReownName(e),writeContract:async e=>{let t=i.state.activeChain,s=this.getAdapter(t);if(!t)throw new Error("writeContract: namespace is required but got undefined");if(!s)throw new Error("writeContract: adapter is required but got undefined");let n=this.getCaipNetwork(),r=this.getCaipAddress(),o=A.getProvider(t);if(!n||!r)throw new Error("writeContract: caipNetwork or caipAddress is required but got undefined");return(await s?.writeContract(N(w({},e),{caipNetwork:n,provider:o,caipAddress:r})))?.hash},parseUnits:(e,t)=>{let s=this.getAdapter(i.state.activeChain);if(!s)throw new Error("parseUnits: adapter is required but got undefined");return s?.parseUnits({value:e,decimals:t})??0n},formatUnits:(e,t)=>{let s=this.getAdapter(i.state.activeChain);if(!s)throw new Error("formatUnits: adapter is required but got undefined");return s?.formatUnits({value:e,decimals:t})??"0"},getCapabilities:async e=>{let t=this.getAdapter(i.state.activeChain);if(!t)throw new Error("getCapabilities: adapter is required but got undefined");return await t?.getCapabilities(e)},grantPermissions:async e=>{let t=this.getAdapter(i.state.activeChain);if(!t)throw new Error("grantPermissions: adapter is required but got undefined");return await t?.grantPermissions(e)},revokePermissions:async e=>{let t=this.getAdapter(i.state.activeChain);if(!t)throw new Error("revokePermissions: adapter is required but got undefined");return t?.revokePermissions?await t.revokePermissions(e):"0x"},walletGetAssets:async e=>{let t=this.getAdapter(i.state.activeChain);if(!t)throw new Error("walletGetAssets: adapter is required but got undefined");return await t?.walletGetAssets(e)??{}},updateBalance:e=>{let t=this.getAddress(e),s=this.getCaipNetwork(e);!s||!t||this.updateNativeBalance(t,s?.id,e)}},E.setClient(this.connectionControllerClient)}async onConnectExternal(e){let t=i.state.activeChain,s=e.chain||t,n=this.getAdapter(s),r=!0;if(e.type===y.CONNECTOR_TYPE_AUTH&&u.AUTH_CONNECTOR_SUPPORTED_CHAINS.some(I=>f.getConnectorId(I)===u.CONNECTOR_ID.AUTH)&&e.chain!==t&&(r=!1),e.chain&&e.chain!==t&&!e.caipNetwork){let l=this.getCaipNetworks().find(h=>h.chainNamespace===e.chain);l&&r&&this.setCaipNetwork(l)}if(!s)throw new Error("connectExternal: namespace not found");if(!n)throw new Error("connectExternal: adapter not found");let o=this.getCaipNetwork(s),c=e.caipNetwork||o,p=await n.connect({id:e.id,address:e.address,info:e.info,type:e.type,provider:e.provider,socialUri:e.socialUri,chainId:e.caipNetwork?.id||o?.id,rpcUrl:e.caipNetwork?.rpcUrls?.default?.http?.[0]||o?.rpcUrls?.default?.http?.[0]});if(p)return C.addConnectedNamespace(s),this.syncProvider(N(w({},p),{chainNamespace:s})),this.setStatus("connected",s),this.syncConnectedWalletInfo(s),C.removeDisconnectedConnectorId(e.id,s),{address:p.address,connectedCaipNetwork:c}}async connectInactiveNamespaces(e,t){let s=e.type===y.CONNECTOR_TYPE_AUTH,n=x.getOtherAuthNamespaces(t?.connectedCaipNetwork?.chainNamespace),r=i.state.activeCaipNetwork,o=this.getAdapter(r?.chainNamespace);s&&(await Promise.all(n.map(async c=>{try{let p=A.getProvider(c),l=this.getCaipNetwork(c);await this.getAdapter(c)?.connect(N(w({},e),{provider:p,socialUri:void 0,chainId:l?.id,rpcUrl:l?.rpcUrls?.default?.http?.[0]}))&&(C.addConnectedNamespace(c),C.removeDisconnectedConnectorId(e.id,c),this.setStatus("connected",c),this.syncConnectedWalletInfo(c))}catch(p){v.warn(T.ALERT_WARNINGS.INACTIVE_NAMESPACE_NOT_CONNECTED.displayMessage,T.ALERT_WARNINGS.INACTIVE_NAMESPACE_NOT_CONNECTED.debugMessage(c,p instanceof Error?p.message:void 0),T.ALERT_WARNINGS.INACTIVE_NAMESPACE_NOT_CONNECTED.code)}})),r&&await o?.switchNetwork({caipNetwork:r}))}getApprovedCaipNetworksData(){if(A.getProviderId(i.state.activeChain)===y.CONNECTOR_TYPE_WALLET_CONNECT){let t=this.universalProvider?.session?.namespaces;return{supportsAllNetworks:this.universalProvider?.session?.peer?.metadata.name==="MetaMask Wallet",approvedCaipNetworkIds:this.getChainsFromNamespaces(t)}}return{supportsAllNetworks:!0,approvedCaipNetworkIds:[]}}async switchCaipNetwork(e){let t=e.chainNamespace;if(this.getAddressByChainNamespace(e.chainNamespace)){let n=A.getProviderId(t);if(e.chainNamespace===i.state.activeChain)await this.getAdapter(t)?.switchNetwork({caipNetwork:e});else if(this.setCaipNetwork(e),n===y.CONNECTOR_TYPE_WALLET_CONNECT)this.syncWalletConnectAccount();else{let r=this.getAddressByChainNamespace(t);r&&this.syncAccount({address:r,chainId:e.id,chainNamespace:t})}}else this.setCaipNetwork(e)}getChainsFromNamespaces(e={}){return Object.values(e).flatMap(t=>{let s=t.chains||[],n=t.accounts.map(r=>{let{chainId:o,chainNamespace:c}=L.parseCaipAddress(r);return`${c}:${o}`});return Array.from(new Set([...s,...n]))})}createAdapters(e){return this.createClients(),this.chainNamespaces.reduce((t,s)=>{let n=e?.find(r=>r.namespace===s);return n?(n.construct({namespace:s,projectId:this.options?.projectId,networks:this.caipNetworks?.filter(({chainNamespace:r})=>r===s)}),t[s]=n):t[s]=new K({namespace:s,networks:this.getCaipNetworks()}),t},{})}async initChainAdapter(e){this.onConnectors(e),this.listenAdapter(e);let t=this.getAdapter(e);if(!t)throw new Error("adapter not found");await t.syncConnectors(),await this.createUniversalProviderForAdapter(e)}async initChainAdapters(){await Promise.all(this.chainNamespaces.map(async e=>{await this.initChainAdapter(e)})),this.initAdapterController()}onConnectors(e){this.getAdapter(e)?.on("connectors",this.setConnectors.bind(this))}listenAdapter(e){let t=this.getAdapter(e);if(!t)return;let s=C.getConnectionStatus();d.state.enableReconnect===!1?this.setStatus("disconnected",e):s==="connected"?this.setStatus("connecting",e):s==="disconnected"?(C.clearAddressCache(),this.setStatus(s,e)):this.setStatus(s,e),t.on("switchNetwork",({address:n,chainId:r})=>{let o=this.getCaipNetworks().find(l=>l.id.toString()===r.toString()||l.caipNetworkId.toString()===r.toString()),c=i.state.activeChain===e,p=i.state.chains.get(e)?.accountState?.address;if(o){let l=c&&n?n:p;l&&this.syncAccount({address:l,chainId:o.id,chainNamespace:e})}else this.setUnsupportedNetwork(r)}),t.on("disconnect",()=>{let n=this.remoteFeatures.multiWallet,r=Array.from(E.state.connections.values()).flat();this.onDisconnectNamespace({chainNamespace:e,closeModal:!n||r.length===0})}),t.on("connections",n=>{this.setConnections(n,e)}),t.on("pendingTransactions",()=>{let n=this.getAddress(e),r=i.state.activeCaipNetwork;!n||!r?.id||this.updateNativeBalance(n,r.id,r.chainNamespace)}),t.on("accountChanged",({address:n,chainId:r,connector:o})=>{this.handlePreviousConnectorConnection(o);let c=i.state.activeChain===e;o?.provider&&(this.syncProvider({id:o.id,type:o.type,provider:o?.provider,chainNamespace:e}),this.syncConnectedWalletInfo(e));let p=i.getNetworkData(e)?.caipNetwork?.id,l=r||p;c&&l?this.syncAccount({address:n,chainId:l,chainNamespace:e}):!c&&l?(this.syncAccountInfo(n,l,e),this.syncBalance({address:n,chainId:l,chainNamespace:e})):this.syncAccountInfo(n,r,e),C.addConnectedNamespace(e)})}async handlePreviousConnectorConnection(e){let t=e?.chain,s=e?.id,n=f.getConnectorId(t),r=d.state.remoteFeatures?.multiWallet,c=t&&s&&n&&n!==s&&!r;try{c&&await E.disconnect({id:n,namespace:t})}catch(p){console.warn("Error disconnecting previous connector",p)}}async createUniversalProviderForAdapter(e){await this.getUniversalProvider(),this.universalProvider&&await this.chainAdapters?.[e]?.setUniversalProvider?.(this.universalProvider)}async syncExistingConnection(){await Promise.allSettled(this.chainNamespaces.map(e=>this.syncNamespaceConnection(e)))}async unSyncExistingConnection(){try{await Promise.allSettled(this.chainNamespaces.map(e=>E.disconnect({namespace:e,initialDisconnect:!0})))}catch(e){console.error("Error disconnecting existing connections:",e)}}async reconnectWalletConnect(){await this.syncWalletConnectAccount();let e=this.getAddress();this.getCaipAddress()||C.deleteRecentWallet();let t=C.getRecentWallet();k.sendEvent({type:"track",event:"CONNECT_SUCCESS",address:e,properties:{method:g.isMobile()?"mobile":"qrcode",name:t?.name||"Unknown",reconnect:!0,view:b.state.view,walletRank:t?.order}})}async syncNamespaceConnection(e){try{e===u.CHAIN.EVM&&g.isSafeApp()&&f.setConnectorId(u.CONNECTOR_ID.SAFE,e);let t=f.getConnectorId(e);switch(this.setStatus("connecting",e),t){case u.CONNECTOR_ID.WALLET_CONNECT:await this.reconnectWalletConnect();break;case u.CONNECTOR_ID.AUTH:break;default:await this.syncAdapterConnection(e)}}catch(t){console.warn("AppKit couldn't sync existing connection",t),this.setStatus("disconnected",e)}}onDisconnectNamespace(e){let{chainNamespace:t,closeModal:s}=e||{};i.resetAccount(t),i.resetNetwork(t),C.removeConnectedNamespace(t);let n=Array.from(i.state.chains.keys());(t?[t]:n).forEach(o=>C.addDisconnectedConnectorId(f.getConnectorId(o)||"",o)),f.removeConnectorId(t),A.resetChain(t),this.setUser(null,t),this.setStatus("disconnected",t),this.setConnectedWalletInfo(null,t),s!==!1&&U.close()}async syncAdapterConnections(){await Promise.allSettled(this.chainNamespaces.map(e=>{let t=this.getAdapter(e),s=this.getCaipAddress(e),n=this.getCaipNetwork(e);return t?.syncConnections({connectToFirstConnector:!s,caipNetwork:n})}))}async syncAdapterConnection(e){let t=this.getAdapter(e),s=this.getCaipNetwork(e),n=f.getConnectorId(e),o=f.getConnectors(e).find(c=>c.id===n);try{if(!t||!o)throw new Error(`Adapter or connector not found for namespace ${e}`);if(!s?.id)throw new Error("CaipNetwork not found");let c=await t?.syncConnection({namespace:e,id:o.id,chainId:s.id,rpcUrl:s?.rpcUrls?.default?.http?.[0]});c?(this.syncProvider(N(w({},c),{chainNamespace:e})),await this.syncAccount(N(w({},c),{chainNamespace:e})),this.setStatus("connected",e),k.sendEvent({type:"track",event:"CONNECT_SUCCESS",address:c.address,properties:{method:"browser",name:o.info?.name||o.name||"Unknown",reconnect:!0,view:b.state.view,walletRank:void 0}})):this.setStatus("disconnected",e)}catch{this.onDisconnectNamespace({chainNamespace:e,closeModal:!1})}}async syncWalletConnectAccount(){let e=Object.keys(this.universalProvider?.session?.namespaces||{}),t=this.chainNamespaces.map(async s=>{let n=this.getAdapter(s);if(!n)return;let r=this.universalProvider?.session?.namespaces?.[s]?.accounts||[],o=i.state.activeCaipNetwork?.id,c=r.find(l=>{let{chainId:h}=L.parseCaipAddress(l);return h===o?.toString()})||r[0];if(c){let l=L.validateCaipAddress(c),{chainId:h,address:I}=L.parseCaipAddress(l);if(A.setProviderId(s,y.CONNECTOR_TYPE_WALLET_CONNECT),this.caipNetworks&&i.state.activeCaipNetwork&&n.namespace!==u.CHAIN.EVM){let O=n.getWalletConnectProvider({caipNetworks:this.getCaipNetworks(),provider:this.universalProvider,activeCaipNetwork:i.state.activeCaipNetwork});A.setProvider(s,O)}else A.setProvider(s,this.universalProvider);f.setConnectorId(u.CONNECTOR_ID.WALLET_CONNECT,s),C.addConnectedNamespace(s),await this.syncAccount({address:I,chainId:h,chainNamespace:s})}else e.includes(s)&&this.setStatus("disconnected",s);let p=this.getApprovedCaipNetworksData();this.syncConnectedWalletInfo(s),i.setApprovedCaipNetworksData(s,{approvedCaipNetworkIds:p.approvedCaipNetworkIds,supportsAllNetworks:p.supportsAllNetworks})});await Promise.all(t)}syncProvider({type:e,provider:t,id:s,chainNamespace:n}){A.setProviderId(n,e),A.setProvider(n,t),f.setConnectorId(s,n)}async syncAccount(e){let t=e.chainNamespace===i.state.activeChain,s=i.getCaipNetworkByNamespace(e.chainNamespace,e.chainId),{address:n,chainId:r,chainNamespace:o}=e,{chainId:c}=C.getActiveNetworkProps(),p=s?.id||c,l=i.state.activeCaipNetwork?.name===u.UNSUPPORTED_NETWORK_NAME,h=i.getNetworkProp("supportsAllNetworks",o);if(this.setStatus("connected",o),!(l&&!h)&&p){let I=this.getCaipNetworks().find(_=>_.id.toString()===p.toString()),O=this.getCaipNetworks().find(_=>_.chainNamespace===o);if(!h&&!I&&!O){let _=this.getApprovedCaipNetworkIds()||[],J=_.find(S=>L.parseCaipNetworkId(S)?.chainId===p.toString()),H=_.find(S=>L.parseCaipNetworkId(S)?.chainNamespace===o);I=this.getCaipNetworks().find(S=>S.caipNetworkId===J),O=this.getCaipNetworks().find(S=>S.caipNetworkId===H||"deprecatedCaipNetworkId"in S&&S.deprecatedCaipNetworkId===H)}let D=I||O;D?.chainNamespace===i.state.activeChain?d.state.enableNetworkSwitch&&!d.state.allowUnsupportedChain&&i.state.activeCaipNetwork?.name===u.UNSUPPORTED_NETWORK_NAME?i.showUnsupportedChainUI():this.setCaipNetwork(D):t||s&&this.setCaipNetworkOfNamespace(s,o),this.syncConnectedWalletInfo(o);let P=this.getAddress(o);x.isLowerCaseMatch(n,P)||this.syncAccountInfo(n,D?.id,o),t?await this.syncBalance({address:n,chainId:D?.id,chainNamespace:o}):await this.syncBalance({address:n,chainId:s?.id,chainNamespace:o}),this.syncIdentity({address:n,chainId:r,chainNamespace:o})}}async syncAccountInfo(e,t,s){let n=this.getCaipAddress(s),r=t||n?.split(":")[1];if(!r)return;let o=`${s}:${r}:${e}`;this.setCaipAddress(o,s,!0),await this.syncIdentity({address:e,chainId:r,chainNamespace:s})}async syncReownName(e,t){try{let s=await this.getReownName(e);if(s[0]){let n=s[0];this.setProfileName(n.name,t)}else this.setProfileName(null,t)}catch{this.setProfileName(null,t)}}syncConnectedWalletInfo(e){let t=f.getConnectorId(e),s=A.getProviderId(e);if(s===y.CONNECTOR_TYPE_ANNOUNCED||s===y.CONNECTOR_TYPE_INJECTED){if(t){let r=this.getConnectors().find(o=>{let c=o.id===t,p=o.info?.rdns===t,l=o.connectors?.some(h=>h.id===t||h.info?.rdns===t);return c||p||!!l});if(r){let{info:o,name:c,imageUrl:p}=r,l=p||this.getConnectorImage(r);this.setConnectedWalletInfo(w({name:c,icon:l},o),e)}}}else if(s===y.CONNECTOR_TYPE_WALLET_CONNECT){let n=A.getProvider(e);n?.session&&this.setConnectedWalletInfo(N(w({},n.session.peer.metadata),{name:n.session.peer.metadata.name,icon:n.session.peer.metadata.icons?.[0]}),e)}else if(t&&(t===u.CONNECTOR_ID.COINBASE_SDK||t===u.CONNECTOR_ID.COINBASE)){let n=this.getConnectors().find(p=>p.id===t),r=n?.name||"Coinbase Wallet",o=n?.imageUrl||this.getConnectorImage(n),c=n?.info;this.setConnectedWalletInfo(N(w({},c),{name:r,icon:o}),e)}}async syncBalance(e){!ie.getNetworksByNamespace(this.getCaipNetworks(),e.chainNamespace).find(s=>s.id.toString()===e.chainId?.toString())||!e.chainId||await this.updateNativeBalance(e.address,e.chainId,e.chainNamespace)}async ready(){await this.readyPromise}async updateNativeBalance(e,t,s){let n=this.getAdapter(s),r=i.getCaipNetworkByNamespace(s,t);if(n){let o=await n.getBalance({address:e,chainId:t,caipNetwork:r,tokens:this.options.tokens});return this.setBalance(o.balance,o.symbol,s),o}}async initializeUniversalAdapter(){let e=Ee.createLogger((s,...n)=>{s&&this.handleAlertError(s),console.error(...n)}),t={projectId:this.options?.projectId,metadata:{name:this.options?.metadata?this.options?.metadata.name:"",description:this.options?.metadata?this.options?.metadata.description:"",url:this.options?.metadata?this.options?.metadata.url:"",icons:this.options?.metadata?this.options?.metadata.icons:[""]},logger:e};d.setManualWCControl(!!this.options?.manualWCControl),this.universalProvider=this.options.universalProvider??await he.init(t),d.state.enableReconnect===!1&&this.universalProvider.session&&await this.universalProvider.disconnect(),this.listenWalletConnect()}listenWalletConnect(){this.universalProvider&&this.chainNamespaces.forEach(e=>{z.listenWcProvider({universalProvider:this.universalProvider,namespace:e,onDisplayUri:t=>{E.setUri(t)},onConnect:t=>{let{address:s}=g.getAccount(t[0]);E.finalizeWcConnection(s)},onDisconnect:()=>{i.state.noAdapters&&this.resetAccount(e),E.resetWcConnection()},onChainChanged:t=>{let s=i.state.activeChain,n=s&&f.state.activeConnectorIds[s]===u.CONNECTOR_ID.WALLET_CONNECT;if(s===e&&(i.state.noAdapters||n)){let r=this.getCaipNetworks().find(c=>c.id.toString()===t.toString()||c.caipNetworkId.toString()===t.toString()),o=this.getCaipNetwork();if(!r){this.setUnsupportedNetwork(t);return}o?.id.toString()!==r?.id.toString()&&o?.chainNamespace===r?.chainNamespace&&this.setCaipNetwork(r)}},onAccountsChanged:t=>{let s=i.state.activeChain,n=s&&f.state.activeConnectorIds[s]===u.CONNECTOR_ID.WALLET_CONNECT;if(s===e&&(i.state.noAdapters||n)){let r=t?.[0];r&&this.syncAccount({address:r.address,chainId:r.chainId,chainNamespace:r.chainNamespace})}}})})}createUniversalProvider(){return!this.universalProviderInitPromise&&g.isClient()&&this.options?.projectId&&(this.universalProviderInitPromise=this.initializeUniversalAdapter()),this.universalProviderInitPromise}async getUniversalProvider(){if(!this.universalProvider)try{await this.createUniversalProvider()}catch(e){k.sendEvent({type:"error",event:"INTERNAL_SDK_ERROR",properties:{errorType:"UniversalProviderInitError",errorMessage:e instanceof Error?e.message:"Unknown",uncaught:!1}}),console.error("AppKit:getUniversalProvider - Cannot create provider",e)}return this.universalProvider}getDisabledCaipNetworks(){let e=i.getAllApprovedCaipNetworkIds(),t=i.getAllRequestedCaipNetworks();return g.sortRequestedNetworks(e,t).filter(n=>i.isCaipNetworkDisabled(n))}handleAlertError(e){let t=Object.entries(T.UniversalProviderErrors).find(([,{message:c}])=>e.message.includes(c)),[s,n]=t??[],{message:r,alertErrorKey:o}=n??{};if(s&&r&&!this.reportedAlertErrors[s]){let c=T.ALERT_ERRORS[o];c&&(v.open(c,"error"),this.reportedAlertErrors[s]=!0)}}getAdapter(e){if(e)return this.chainAdapters?.[e]}createAdapter(e){if(!e)return;let t=e.namespace;if(!t)return;this.createClients();let s=e;s.namespace=t,s.construct({namespace:t,projectId:this.options?.projectId,networks:this.caipNetworks?.filter(({chainNamespace:n})=>n===t)}),this.chainNamespaces.includes(t)||this.chainNamespaces.push(t),this.chainAdapters&&(this.chainAdapters[t]=s)}async open(e){await this.injectModalUi(),e?.uri&&E.setUri(e.uri);let{isSwap:t,isSend:s}=this.toModalOptions();return t(e)?U.open(N(w({},e),{data:{swap:e.arguments}})):s(e)&&e.arguments?this.openSend(e.arguments):U.open(e)}async close(){await this.injectModalUi(),U.close()}setLoading(e,t){U.setLoading(e,t)}async disconnect(e){await E.disconnect({namespace:e})}getSIWX(){return d.state.siwx}getError(){return""}getChainId(){return i.state.activeCaipNetwork?.id}async switchNetwork(e,{throwOnFailure:t=!1}={}){let s=this.getCaipNetworks().find(n=>n.id===e.id);if(!s){v.open(T.ALERT_ERRORS.SWITCH_NETWORK_NOT_FOUND,"error");return}await i.switchActiveNetwork(s,{throwOnFailure:t})}getWalletProvider(){return i.state.activeChain?A.state.providers[i.state.activeChain]:null}getWalletProviderType(){return A.getProviderId(i.state.activeChain)}subscribeProviders(e){return A.subscribeProviders(e)}getThemeMode(){return R.state.themeMode}getThemeVariables(){return R.state.themeVariables}setThemeMode(e){R.setThemeMode(e),Ne(R.state.themeMode)}setTermsConditionsUrl(e){d.setTermsConditionsUrl(e)}setPrivacyPolicyUrl(e){d.setPrivacyPolicyUrl(e)}setThemeVariables(e){R.setThemeVariables(e),ve(R.state.themeVariables)}subscribeTheme(e){return R.subscribe(e)}subscribeConnections(e){return this.remoteFeatures.multiWallet?E.subscribe(e):(v.open(u.REMOTE_FEATURES_ALERTS.MULTI_WALLET_NOT_ENABLED.DEFAULT,"info"),()=>{})}getWalletInfo(e){return e?i.state.chains.get(e)?.accountState?.connectedWalletInfo:i.getAccountData()?.connectedWalletInfo}getAccount(e){let t=e||i.state.activeChain,s=f.getAuthConnector(t),n=i.getAccountData(t),r=C.getConnectedConnectorId(i.state.activeChain),o=E.getConnections(t);if(!t)throw new Error("AppKit:getAccount - namespace is required");let c=o.flatMap(p=>p.accounts.map(({address:l,type:h,publicKey:I})=>g.createAccount(t,l,h||"eoa",I)));if(n)return{allAccounts:c,caipAddress:n.caipAddress,address:g.getPlainAddress(n.caipAddress),isConnected:!!n.caipAddress,status:n.status,embeddedWalletInfo:s&&r===u.CONNECTOR_ID.AUTH?{user:n.user?N(w({},n.user),{username:C.getConnectedSocialUsername()}):void 0,authProvider:n.socialProvider||"email",accountType:q(t),isSmartAccountDeployed:!!n.smartAccountDeployed}:void 0}}subscribeAccount(e,t){let s=()=>{let n=this.getAccount(t);n&&e(n)};t?i.subscribeChainProp("accountState",s,t):i.subscribe(s),f.subscribe(s)}subscribeNetwork(e){return i.subscribe(({activeCaipNetwork:t})=>{e({caipNetwork:t,chainId:t?.id,caipNetworkId:t?.caipNetworkId})})}subscribeWalletInfo(e,t){return t?i.subscribeChainProp("accountState",s=>e(s?.connectedWalletInfo),t):i.subscribeChainProp("accountState",s=>e(s?.connectedWalletInfo))}subscribeShouldUpdateToAddress(e){i.subscribeChainProp("accountState",t=>e(t?.shouldUpdateToAddress))}subscribeCaipNetworkChange(e){i.subscribeKey("activeCaipNetwork",e)}getState(){return F.state}getRemoteFeatures(){return d.state.remoteFeatures}subscribeState(e){return F.subscribe(e)}subscribeRemoteFeatures(e){return d.subscribeKey("remoteFeatures",e)}showErrorMessage(e){te.showError(e)}showSuccessMessage(e){te.showSuccess(e)}getEvent(){return w({},k.state)}subscribeEvents(e){return k.subscribe(e)}replace(e){b.replace(e)}redirect(e){b.push(e)}popTransactionStack(e){b.popTransactionStack(e)}isOpen(){return U.state.open}isTransactionStackEmpty(){return b.state.transactionStack.length===0}static getInstance(){return this.instance}updateFeatures(e){d.setFeatures(e)}updateRemoteFeatures(e){d.setRemoteFeatures(e)}updateOptions(e){let t=d.state||{},s=w(w({},t),e);d.setOptions(s)}setConnectMethodsOrder(e){d.setConnectMethodsOrder(e)}setWalletFeaturesOrder(e){d.setWalletFeaturesOrder(e)}setCollapseWallets(e){d.setCollapseWallets(e)}setSocialsOrder(e){d.setSocialsOrder(e)}getConnectMethodsOrder(){return ge.getConnectOrderMethod(d.state.features,f.getConnectors())}addNetwork(e,t){if(this.chainAdapters&&!this.chainAdapters[e])throw new Error(`Adapter for namespace ${e} doesn't exist`);let s=this.extendCaipNetwork(t,this.options);this.getCaipNetworks().find(n=>n.id===s.id)||i.addNetwork(s)}removeNetwork(e,t){if(this.chainAdapters&&!this.chainAdapters[e])throw new Error(`Adapter for namespace ${e} doesn't exist`);this.getCaipNetworks().find(n=>n.id===t)&&i.removeNetwork(e,t)}};var Ie=!1,Z=class extends X{async onAuthProviderConnected(e){let t=x.userChainIdToChainNamespace(e?.chainId);if(e.message&&e.signature&&e.siwxMessage&&await M.addEmbeddedWalletSession({chainId:e.siwxMessage.chainId,accountAddress:e.address,notBefore:e.siwxMessage.notBefore,statement:e.siwxMessage.statement,resources:e.siwxMessage.resources,requestId:e.siwxMessage.requestId,issuedAt:e.siwxMessage.issuedAt,domain:e.siwxMessage.domain,uri:e.siwxMessage.uri,version:e.siwxMessage.version,nonce:e.siwxMessage.nonce},e.message,e.signature),!t)throw new Error("AppKit:onAuthProviderConnected - namespace is required");let s=t===u.CHAIN.EVM?`eip155:${e.chainId}:${e.address}`:`${e.chainId}:${e.address}`,n=d.state.defaultAccountTypes[t],r=q(t),o=e.preferredAccountType||r||n;this.setCaipAddress(s,t);let O=e,{signature:c,siwxMessage:p,message:l}=O,h=V(O,["signature","siwxMessage","message"]),I=i.getAccountData(t);this.setUser(w(w({},I?.user||{}),h),t),this.setSmartAccountDeployed(!!e.smartAccountDeployed,t),this.setPreferredAccountType(o,t),await Promise.all([this.syncAuthConnectorTheme(this.authProvider),this.syncAccount({address:e.address,chainId:e.chainId,chainNamespace:t})]),this.setLoading(!1,t)}setupAuthConnectorListeners(e){e.onRpcRequest(t=>{G.checkIfRequestExists(t)?G.checkIfRequestIsSafe(t)||this.handleUnsafeRPCRequest():(this.open(),console.error(Q.RPC_METHOD_NOT_ALLOWED_MESSAGE,{method:t.method}),setTimeout(()=>{this.showErrorMessage(Q.RPC_METHOD_NOT_ALLOWED_UI_MESSAGE)},300),e.rejectRpcRequests())}),e.onRpcError(()=>{this.isOpen()&&(this.isTransactionStackEmpty()?this.close():this.popTransactionStack("error"))}),e.onRpcSuccess((t,s)=>{let n=G.checkIfRequestIsSafe(s),r=this.getAddress(),o=i.state.activeCaipNetwork;n||(r&&o?.id&&this.updateNativeBalance(r,o.id,o.chainNamespace),this.isTransactionStackEmpty()?this.close():this.popTransactionStack("success"))}),e.onNotConnected(()=>{let t=i.state.activeChain;if(!t)throw new Error("AppKit:onNotConnected - namespace is required");f.getConnectorId(t)===u.CONNECTOR_ID.AUTH&&(this.setCaipAddress(null,t),this.setLoading(!1,t))}),e.onConnect(this.onAuthProviderConnected.bind(this)),e.onSocialConnected(this.onAuthProviderConnected.bind(this)),e.onSetPreferredAccount(({address:t,type:s})=>{let n=i.state.activeChain;if(!n)throw new Error("AppKit:onSetPreferredAccount - namespace is required");t&&this.setPreferredAccountType(s,n)})}async syncAuthConnectorTheme(e){if(!e)return;let t=R.getSnapshot();await e.syncTheme({themeMode:t.themeMode,themeVariables:t.themeVariables,w3mThemeVariables:oe(t.themeVariables,t.themeMode)})}async syncAuthConnector(e,t){let s=u.AUTH_CONNECTOR_SUPPORTED_CHAINS.includes(t),n=t===i.state.activeChain;if(!s)return;this.setLoading(!0,t);let r=e.getLoginEmailUsed();this.setLoading(r,t),r&&this.setStatus("connecting",t);let o=e.getEmail(),c=e.getUsername(),p=i.getAccountData(t)?.user||{};this.setUser(N(w({},p),{username:c,email:o}),t),this.setupAuthConnectorListeners(e);let{isConnected:l}=await e.isConnected();if(t&&s&&n)if(l&&this.connectionControllerClient?.connectExternal){await e.init(),await this.syncAuthConnectorTheme(e),await this.connectionControllerClient?.connectExternal({id:u.CONNECTOR_ID.AUTH,info:{name:u.CONNECTOR_ID.AUTH},type:y.CONNECTOR_TYPE_AUTH,provider:e,chainId:i.getNetworkData(t)?.caipNetwork?.id,chain:t}),this.setStatus("connected",t);let h=C.getConnectedSocialProvider();h?k.sendEvent({type:"track",event:"SOCIAL_LOGIN_SUCCESS",address:this.getAddress(),properties:{provider:h,reconnect:!0}}):k.sendEvent({type:"track",event:"CONNECT_SUCCESS",address:this.getAddress(),properties:{method:"email",name:this.universalProvider?.session?.peer?.metadata?.name||"Unknown",reconnect:!0,view:b.state.view,walletRank:void 0}})}else f.getConnectorId(t)===u.CONNECTOR_ID.AUTH&&(this.setStatus("disconnected",t),C.removeConnectedNamespace(t));this.setLoading(!1,t)}async checkExistingTelegramSocialConnection(e){try{if(!g.isTelegram())return;let t=C.getTelegramSocialProvider();if(!t||!g.isClient())return;let n=new URL(window.location.href).searchParams.get("result_uri");if(!n)return;t&&i.setAccountProp("socialProvider",t,e),await this.authProvider?.init();let r=f.getAuthConnector();t&&r&&(this.setLoading(!0,e),await E.connectExternal({id:r.id,type:r.type,socialUri:n},r.chain),C.setConnectedSocialProvider(t),C.removeTelegramSocialProvider(),k.sendEvent({type:"track",event:"SOCIAL_LOGIN_SUCCESS",properties:{provider:t}}))}catch(t){this.setLoading(!1,e),console.error("checkExistingSTelegramocialConnection error",t)}try{let t=new URL(window.location.href);t.searchParams.delete("result_uri"),window.history.replaceState({},document.title,t.toString())}catch(t){console.error("tma social login failed",t)}}createAuthProvider(e){if(!u.AUTH_CONNECTOR_SUPPORTED_CHAINS.includes(e))return;let s=this.remoteFeatures?.email,n=Array.isArray(this.remoteFeatures?.socials)&&this.remoteFeatures.socials.length>0,r=s||n,c=x.getActiveNamespaceConnectedToAuth()||e;!this.authProvider&&this.options?.projectId&&r&&(this.authProvider=$.getInstance({projectId:this.options.projectId,enableLogger:this.options.enableAuthLogger,chainId:this.getCaipNetwork(c)?.caipNetworkId,abortController:T.EmbeddedWalletAbortController,onTimeout:l=>{l==="iframe_load_failed"?v.open(T.ALERT_ERRORS.IFRAME_LOAD_FAILED,"error"):l==="iframe_request_timeout"?v.open(T.ALERT_ERRORS.IFRAME_REQUEST_TIMEOUT,"error"):l==="unverified_domain"&&v.open(T.ALERT_ERRORS.UNVERIFIED_DOMAIN,"error")},getActiveCaipNetwork:l=>de(l),getCaipNetworks:l=>i.getCaipNetworks(l)}),F.subscribeOpen(l=>{!l&&this.isTransactionStackEmpty()&&this.authProvider?.rejectRpcRequests()}));let p=e===i.state.activeChain&&d.state.enableReconnect;d.state.enableReconnect===!1?this.syncAuthConnectorTheme(this.authProvider):this.authProvider&&p&&(this.syncAuthConnector(this.authProvider,e),this.checkExistingTelegramSocialConnection(e))}createAuthProviderForAdapter(e){this.createAuthProvider(e),this.authProvider&&this.chainAdapters?.[e]?.setAuthProvider?.(this.authProvider)}initControllers(e){super.initControllers(e),this.options.excludeWalletIds&&W.initializeExcludedWallets({ids:this.options.excludeWalletIds})}async switchCaipNetwork(e){if(!e)return;let t=i.state.activeChain,s=e.chainNamespace,n=this.getAddressByChainNamespace(s);if(s===t&&i.getAccountData(s)?.caipAddress)await this.getAdapter(s)?.switchNetwork({caipNetwork:e}),this.setCaipNetwork(e);else{let c=A.getProviderId(t)===y.CONNECTOR_TYPE_AUTH,p=A.getProviderId(s),l=p===y.CONNECTOR_TYPE_AUTH,h=u.AUTH_CONNECTOR_SUPPORTED_CHAINS.includes(s);if(!s)throw new Error("AppKit:switchCaipNetwork - networkNamespace is required");if((c&&p===void 0||l)&&h)try{i.state.activeChain=e.chainNamespace,n?await this.getAdapter(s)?.switchNetwork({caipNetwork:e}):await this.connectionControllerClient?.connectExternal?.({id:u.CONNECTOR_ID.AUTH,provider:this.authProvider,chain:s,chainId:e.id,type:y.CONNECTOR_TYPE_AUTH,caipNetwork:e}),this.setCaipNetwork(e)}catch{await this.getAdapter(s)?.switchNetwork({caipNetwork:e})}else p===y.CONNECTOR_TYPE_WALLET_CONNECT?(i.state.noAdapters||await this.getAdapter(s)?.switchNetwork({caipNetwork:e}),this.setCaipNetwork(e),this.syncWalletConnectAccount()):(this.setCaipNetwork(e),n&&this.syncAccount({address:n,chainId:e.id,chainNamespace:s}))}}async initialize(e){await super.initialize(e),this.chainNamespaces?.forEach(t=>{this.createAuthProviderForAdapter(t)}),await this.injectModalUi(),F.set({initialized:!0})}async syncIdentity({address:e,chainId:t,chainNamespace:s}){let n=`${s}:${t}`;if(this.caipNetworks?.find(c=>c.caipNetworkId===n)?.testnet){this.setProfileName(null,s),this.setProfileImage(null,s);return}let o=f.getConnectorId(s)===u.CONNECTOR_ID.AUTH;try{let{name:c,avatar:p}=await this.fetchIdentity({address:e});!c&&o?await this.syncReownName(e,s):(this.setProfileName(c,s),this.setProfileImage(p,s))}catch{t!==1&&this.setProfileImage(null,s)}}syncConnectedWalletInfo(e){let t=A.getProviderId(e);if(t===y.CONNECTOR_TYPE_AUTH){let s=this.authProvider;if(s){let n=C.getConnectedSocialProvider()??"email",r=s.getEmail()??s.getUsername();this.setConnectedWalletInfo({name:t,identifier:r,social:n},e)}}else super.syncConnectedWalletInfo(e)}async injectModalUi(){if(g.isClient()&&!Ie)try{let e=w(w({},m.DEFAULT_FEATURES),this.options.features),t=this.remoteFeatures;if(await this.loadModalComponents(e,t),g.isClient()&&!document.querySelector("w3m-modal")){let n=document.createElement("w3m-modal");!d.state.disableAppend&&!d.state.enableEmbedded&&document.body.insertAdjacentElement("beforeend",n)}Ie=!0}catch(e){console.error("Error injecting modal UI:",e)}}async loadModalComponents(e,t){if(!g.isClient())return;let s=[];(t.email||t.socials&&t.socials.length>0)&&s.push(import("./chunk-VJANLVNO.js")),t.email&&s.push(import("./chunk-LDLZQPAW.js")),t.socials&&s.push(import("./chunk-B6EQJCAZ.js")),t.swaps&&t.swaps.length>0&&s.push(import("./chunk-WHH3NR6J.js")),e.send&&s.push(import("./chunk-DPAUDOLQ.js")),e.receive&&s.push(import("./chunk-VG2HV3OG.js")),t.onramp&&t.onramp.length>0&&s.push(import("./chunk-SEWT7MIB.js")),t.payWithExchange&&s.push(import("./chunk-F7QWXH7T.js")),t.activity&&s.push(import("./chunk-AX2E2NEW.js")),(e.pay||t.payments)&&s.push(import("./chunk-EYCQIA4M.js")),t.emailCapture&&s.push(import("./chunk-A5YZ2DZR.js")),await Promise.all([...s,import("./chunk-XWLHWZ2G.js"),import("./chunk-FX4ZP5KN.js")])}};var ye="1.8.9";function Et(a){return new Z(N(w({},a),{sdkVersion:g.generateSdkVersion(a.adapters??[],"html",ye)}))}export{j as a,Z as b,Et as c};
